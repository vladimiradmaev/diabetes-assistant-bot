package menus

import (
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vladimiradmaev/diabetes-helper/internal/bot/keyboards"
	"github.com/vladimiradmaev/diabetes-helper/internal/database"
)

// SendMainMenu sends the main menu to a chat
func SendMainMenu(api *tgbotapi.BotAPI, chatID int64) error {
	text := `ü§ñ *–î–∏–∞–ê–ò* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–±–µ—Ç–æ–º

üçΩÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã, –∏ —è:
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—é —Ö–ª–µ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–•–ï)  
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂—É –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞

ü§ñ *–ò–ò –º–æ–¥–µ–ª–∏:*
‚Ä¢ Gemini 2.0 Flash (–¥–æ 1500 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenAI –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboards.MainMenu()
	_, err := api.Send(msg)
	return err
}

// SendSettingsMenu sends the settings menu to a chat
func SendSettingsMenu(api *tgbotapi.BotAPI, chatID int64) error {
	msg := tgbotapi.NewMessage(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
	msg.ReplyMarkup = keyboards.SettingsMenu()
	_, err := api.Send(msg)
	return err
}

// SendInsulinRatioMenu sends the insulin ratio management menu
func SendInsulinRatioMenu(api *tgbotapi.BotAPI, chatID int64, ratios []database.InsulinRatio) error {
	var text string
	if len(ratios) == 0 {
		text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
	} else {
		// Calculate total hours
		totalMinutes := 0
		for _, r := range ratios {
			start := timeToMinutes(r.StartTime)
			end := timeToMinutes(r.EndTime)
			if end < start {
				end += 24 * 60 // Handle periods crossing midnight
			}
			totalMinutes += end - start
		}
		totalHours := float64(totalMinutes) / 60.0

		text = "–í–∞—à–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:\n\n"
		for _, r := range ratios {
			text += fmt.Sprintf("üïí %s - %s: %.1f –µ–¥/–•–ï\n", r.StartTime, r.EndTime, r.Ratio)
		}
		text += "\n"

		if totalHours < 24 {
			text += fmt.Sprintf("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–ª—å–∫–æ %.1f —á–∞—Å–æ–≤ –∏–∑ 24\n", totalHours)
			text += "–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –ø–µ—Ä–∏–æ–¥—ã, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –≤—Å–µ 24 —á–∞—Å–∞\n"
		} else if totalHours > 24 {
			text += fmt.Sprintf("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %.1f —á–∞—Å–æ–≤ (–±–æ–ª—å—à–µ 24)\n", totalHours)
			text += "–ü–µ—Ä–∏–æ–¥—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç 24 —á–∞—Å–∞\n"
		} else {
			text += "‚úÖ –ü–µ—Ä–∏–æ–¥—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç 24 —á–∞—Å–∞\n"
		}
	}

	keyboard := keyboards.InsulinRatioMenu(len(ratios) > 0)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := api.Send(msg)
	return err
}

// Helper function to convert time string to minutes since midnight
func timeToMinutes(timeStr string) int {
	t, _ := time.Parse("15:04", timeStr)
	return t.Hour()*60 + t.Minute()
}
