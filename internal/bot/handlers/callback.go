package handlers

import (
	"context"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/vladimiradmaev/diabetes-helper/internal/bot/menus"
	"github.com/vladimiradmaev/diabetes-helper/internal/bot/state"
	"github.com/vladimiradmaev/diabetes-helper/internal/database"
)

// CallbackHandler handles callback query messages
type CallbackHandler struct {
	api          *tgbotapi.BotAPI
	deps         Dependencies
	stateManager state.StateManager
}

// NewCallbackHandler creates a new callback handler
func NewCallbackHandler(api *tgbotapi.BotAPI, deps Dependencies, stateManager state.StateManager) *CallbackHandler {
	return &CallbackHandler{
		api:          api,
		deps:         deps,
		stateManager: stateManager,
	}
}

// Handle processes a callback query
func (h *CallbackHandler) Handle(ctx context.Context, query *tgbotapi.CallbackQuery, user *database.User) error {
	// Answer the callback query first
	callback := tgbotapi.NewCallback(query.ID, "")
	if _, err := h.api.Request(callback); err != nil {
		return err
	}

	switch query.Data {
	case "analyze_food":
		return h.handleAnalyzeFood(query.Message.Chat.ID, user)
	case "settings":
		return h.handleSettings(query.Message.Chat.ID)
	case "insulin_ratio":
		return h.handleInsulinRatio(query.Message.Chat.ID, user)
	case "add_insulin_ratio":
		return h.handleAddInsulinRatio(query.Message.Chat.ID, user)
	case "main_menu":
		return h.handleMainMenu(query.Message.Chat.ID, user)
	case "edit_insulin_ratio":
		return h.handleEditInsulinRatio(query.Message.Chat.ID, user)
	case "clear_and_add_ratio":
		return h.handleClearAndAddRatio(query.Message.Chat.ID, user)
	case "delete_insulin_ratio":
		return h.handleDeleteInsulinRatio(query.Message.Chat.ID, user)
	case "clear_ratios":
		return h.handleClearRatios(query.Message.Chat.ID, user)
	case "help":
		return h.handleHelp(query.Message.Chat.ID)
	case "food_examples":
		return h.handleFoodExamples(query.Message.Chat.ID)
	default:
		return h.handleUnknownCallback(query.Message.Chat.ID)
	}
}

// handleAnalyzeFood handles analyze food callback
func (h *CallbackHandler) handleAnalyzeFood(chatID int64, user *database.User) error {
	h.stateManager.SetUserState(user.TelegramID, "analyzing_food")

	text := `üì∑ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*

üí° *–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:*
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "150")
‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –±–ª—é–¥–æ —Ü–µ–ª–∏–∫–æ–º
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ

ü§ñ *–ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤
‚Ä¢ –•–ª–µ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–•–ï)
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –¥–æ–∑—É –∏–Ω—Å—É–ª–∏–Ω–∞`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí° –ü—Ä–∏–º–µ—Ä—ã", "food_examples"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := h.api.Send(msg)
	return err
}

// handleSettings handles settings callback
func (h *CallbackHandler) handleSettings(chatID int64) error {
	return menus.SendSettingsMenu(h.api, chatID)
}

// handleInsulinRatio handles insulin ratio callback
func (h *CallbackHandler) handleInsulinRatio(chatID int64, user *database.User) error {
	ratios, err := h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
		_, sendErr := h.api.Send(msg)
		return sendErr
	}
	return menus.SendInsulinRatioMenu(h.api, chatID, ratios)
}

// handleAddInsulinRatio handles add insulin ratio callback
func (h *CallbackHandler) handleAddInsulinRatio(chatID int64, user *database.User) error {
	h.stateManager.SetUserState(user.TelegramID, state.WaitingForTimePeriod)
	h.stateManager.ClearTempData(user.TelegramID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "insulin_ratio"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00-12:00):")
	msg.ReplyMarkup = keyboard
	_, err := h.api.Send(msg)
	return err
}

// handleMainMenu handles main menu callback
func (h *CallbackHandler) handleMainMenu(chatID int64, user *database.User) error {
	h.stateManager.SetUserState(user.TelegramID, state.None)
	return menus.SendMainMenu(h.api, chatID)
}

// handleEditInsulinRatio handles edit insulin ratio callback
func (h *CallbackHandler) handleEditInsulinRatio(chatID int64, user *database.User) error {
	ratios, err := h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
		_, err := h.api.Send(msg)
		return err
	}

	if len(ratios) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		_, err := h.api.Send(msg)
		return err
	}

	// Show confirmation message
	text := "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.\n\n"
	text += "–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã:\n"
	for _, r := range ratios {
		text += fmt.Sprintf("‚Ä¢ %s-%s: %.1f –µ–¥/–•–ï\n", r.StartTime, r.EndTime, r.Ratio)
	}
	text += "\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "clear_and_add_ratio"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", "insulin_ratio"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err = h.api.Send(msg)
	return err
}

// handleClearAndAddRatio handles clear and add ratio callback
func (h *CallbackHandler) handleClearAndAddRatio(chatID int64, user *database.User) error {
	// Delete all existing ratios
	ratios, err := h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
		_, err := h.api.Send(msg)
		return err
	}

	for _, r := range ratios {
		if err := h.deps.InsulinSvc.DeleteRatio(context.Background(), user.ID, r.ID); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: %v", err))
			_, err := h.api.Send(msg)
			return err
		}
	}

	// Start adding new ratio
	h.stateManager.SetUserState(user.TelegramID, state.WaitingForTimePeriod)
	h.stateManager.ClearTempData(user.TelegramID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "insulin_ratio"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00-12:00):")
	msg.ReplyMarkup = keyboard
	_, err = h.api.Send(msg)
	return err
}

// handleDeleteInsulinRatio handles delete insulin ratio callback
func (h *CallbackHandler) handleDeleteInsulinRatio(chatID int64, user *database.User) error {
	ratios, err := h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
		_, err := h.api.Send(msg)
		return err
	}

	if len(ratios) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
		_, err := h.api.Send(msg)
		return err
	}

	// Show confirmation message
	text := "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.\n\n"
	text += "–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã:\n"
	for _, r := range ratios {
		text += fmt.Sprintf("‚Ä¢ %s-%s: %.1f –µ–¥/–•–ï\n", r.StartTime, r.EndTime, r.Ratio)
	}
	text += "\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "clear_ratios"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", "insulin_ratio"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err = h.api.Send(msg)
	return err
}

// handleClearRatios handles clear ratios callback
func (h *CallbackHandler) handleClearRatios(chatID int64, user *database.User) error {
	// Delete all existing ratios
	ratios, err := h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
		_, err := h.api.Send(msg)
		return err
	}

	for _, r := range ratios {
		if err := h.deps.InsulinSvc.DeleteRatio(context.Background(), user.ID, r.ID); err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: %v", err))
			_, err := h.api.Send(msg)
			return err
		}
	}

	msg := tgbotapi.NewMessage(chatID, "‚úÖ –í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
	_, err = h.api.Send(msg)
	if err != nil {
		return err
	}

	ratios, err = h.deps.InsulinSvc.GetUserRatios(context.Background(), user.ID)
	if err != nil {
		return err
	}
	return menus.SendInsulinRatioMenu(h.api, chatID, ratios)
}

// handleHelp handles help callback
func (h *CallbackHandler) handleHelp(chatID int64) error {
	text := `ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –µ–¥—ã:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –í –ø–æ–¥–ø–∏—Å–∏ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: "150")
‚Ä¢ –ï—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –ò–ò –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≥–ª–µ–≤–æ–¥–∞—Ö, –•–ï –∏ –¥–æ–∑–µ –∏–Ω—Å—É–ª–∏–Ω–∞

*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–Ω—Å—É–ª–∏–Ω–∞ –Ω–∞ –•–ï –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
‚Ä¢ –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑—ã –∏–Ω—Å—É–ª–∏–Ω–∞

*üí° –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å –±–ª—é–¥–∞ –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚Ä¢ –í—Å–µ–≥–¥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := h.api.Send(msg)
	return err
}

// handleFoodExamples handles food examples callback
func (h *CallbackHandler) handleFoodExamples(chatID int64) error {
	text := `üì∏ *–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã:*

‚úÖ *–•–æ—Ä–æ—à–∏–µ —Ñ–æ—Ç–æ:*
‚Ä¢ –¶–µ–ª–æ–µ –±–ª—é–¥–æ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –í–∏–¥–Ω—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚Ä¢ –£–∫–∞–∑–∞–Ω –≤–µ—Å: "200"

‚ùå *–ü–ª–æ—Ö–∏–µ —Ñ–æ—Ç–æ:*
‚Ä¢ –°–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ
‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ
‚Ä¢ –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ/–±–ª–∏–∑–∫–æ
‚Ä¢ –ù–µ—è—Å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

ü•ò *–•–æ—Ä–æ—à–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è:*
‚Ä¢ –ö–∞—à–∏, –≥–∞—Ä–Ω–∏—Ä—ã
‚Ä¢ –ú—è—Å–æ, —Ä—ã–±–∞
‚Ä¢ –û–≤–æ—â–∏, —Å–∞–ª–∞—Ç—ã
‚Ä¢ –°—É–ø—ã
‚Ä¢ –•–ª–µ–±, –≤—ã–ø–µ—á–∫–∞

‚ö†Ô∏è *–°–ª–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è:*
‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
‚Ä¢ –°–æ—É—Å—ã –≤–Ω—É—Ç—Ä–∏
‚Ä¢ –ú–µ–ª–∫–æ –Ω–∞—Ä–µ–∑–∞–Ω–Ω–æ–µ`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "analyze_food"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := h.api.Send(msg)
	return err
}

// handleUnknownCallback handles unknown callbacks
func (h *CallbackHandler) handleUnknownCallback(chatID int64) error {
	msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	_, err := h.api.Send(msg)
	return err
}
